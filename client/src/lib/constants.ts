import { NodeType } from "@shared/schema";

export const NODE_CONFIG = {
  compute: {
    color: "nexus-orange",
    bgColor: "bg-nexus-orange",
    borderColor: "border-nexus-orange",
    textColor: "text-orange-500",
    icon: "fa-video",
    name: "Compute",
    description: "Processing Units",
  },
  rpc: {
    color: "nexus-red", 
    bgColor: "bg-nexus-red",
    borderColor: "border-nexus-red",
    textColor: "text-red-500",
    icon: "fa-terminal",
    name: "RPC",
    description: "API Gateways",
  },
  sentry: {
    color: "nexus-pink",
    bgColor: "bg-nexus-pink", 
    borderColor: "border-nexus-pink",
    textColor: "text-pink-500",
    icon: "fa-shield-alt",
    name: "Sentry",
    description: "Security Guards",
  },
  oracle: {
    color: "nexus-magenta",
    bgColor: "bg-nexus-magenta",
    borderColor: "border-nexus-magenta", 
    textColor: "text-purple-500",
    icon: "fa-eye",
    name: "Oracle",
    description: "Data Validators",
  },
  data: {
    color: "nexus-purple",
    bgColor: "bg-nexus-purple",
    borderColor: "border-nexus-purple",
    textColor: "text-violet-500", 
    icon: "fa-database",
    name: "Data",
    description: "Storage Layer",
  },
  full: {
    color: "nexus-blue",
    bgColor: "bg-nexus-blue",
    borderColor: "border-nexus-blue",
    textColor: "text-blue-500",
    icon: "fa-mobile-alt",
    name: "Full",
    description: "Blockchain State",
  },
  consumer: {
    color: "nexus-teal",
    bgColor: "bg-nexus-teal",
    borderColor: "border-nexus-teal",
    textColor: "text-cyan-500",
    icon: "fa-shopping-cart", 
    name: "Consumer",
    description: "Client Access",
  },
  validator: {
    color: "nexus-green",
    bgColor: "bg-nexus-green",
    borderColor: "border-nexus-green",
    textColor: "text-green-500",
    icon: "fa-project-diagram",
    name: "Validator", 
    description: "Consensus Layer",
  },
} as const;

export const PHASE_CONFIG = [
  {
    name: "Setup & Resource Commitment",
    steps: "1-11", 
    description: "Initialization and temporal commitment",
    color: "nexus-blue",
  },
  {
    name: "Data Distribution",
    steps: "12-15",
    description: "Dataset preparation and sharding", 
    color: "nexus-purple",
  },
  {
    name: "Training Execution", 
    steps: "16-19",
    description: "Parallel training computation",
    color: "nexus-orange",
  },
  {
    name: "Validation & Deployment",
    steps: "20-38", 
    description: "Model validation and network deployment",
    color: "nexus-green",
  },
];

export const TRAINING_STEPS = [
  { step: 1, phase: "initialization", name: "Consumer nodes receive training request", nodeType: "consumer" },
  { step: 2, phase: "initialization", name: "RPC nodes process request routing", nodeType: "rpc" },
  { step: 3, phase: "initialization", name: "Data nodes prepare training dataset", nodeType: "data" },
  { step: 4, phase: "initialization", name: "Oracle nodes establish connections", nodeType: "oracle" },
  { step: 5, phase: "initialization", name: "Validator nodes verify parameters", nodeType: "validator" },
  { step: 6, phase: "initialization", name: "Full nodes record blockchain state", nodeType: "full" },
  { step: 7, phase: "initialization", name: "Sentry nodes begin monitoring", nodeType: "sentry" },
  { step: 8, phase: "resource_commitment", name: "Compute nodes submit temporal commitments", nodeType: "compute" },
  { step: 9, phase: "resource_commitment", name: "PoTC consensus locks resources", nodeType: "validator" },
  { step: 10, phase: "resource_commitment", name: "Sentry nodes verify commitment proofs", nodeType: "sentry" },
  { step: 11, phase: "resource_commitment", name: "Validator nodes approve resources", nodeType: "validator" },
  { step: 12, phase: "data_distribution", name: "Data nodes shard training dataset", nodeType: "data" },
  { step: 13, phase: "data_distribution", name: "Oracle nodes inject real-time feeds", nodeType: "oracle" },
  { step: 14, phase: "data_distribution", name: "Full nodes distribute data shards", nodeType: "full" },
  { step: 15, phase: "data_distribution", name: "Compute nodes receive data shards", nodeType: "compute" },
  { step: 16, phase: "training_execution", name: "Compute nodes begin parallel training", nodeType: "compute" },
  { step: 17, phase: "training_execution", name: "Temporal commitment protocol active", nodeType: "compute" },
  { step: 18, phase: "training_execution", name: "Generate gradient updates", nodeType: "compute" },
  { step: 19, phase: "training_execution", name: "Full nodes aggregate results", nodeType: "full" },
  // ... continuing with validation loop steps 20-38
];
